* 웹 브라우저의 렌더링 과정을 설명하고, 렌더링 성능을 저하시킬 수 있는 요소들은 어떤 것이 있는가 그리고 레이아웃 시프트(Layout Shift)와 페인트(Paint) 과정에서 발생하는 문제를 해결하기 위해 사용할 수 있는 최적화 기법들을 설명하라.

<웹 브라우저의 렌더링 과정>
=> HTML 파싱과 DOM 트리 생성 : 브라우저는 HTML 파일을 파싱하여 DOM 트리를 생성한다. DOM은 HTML 요소의 계층 구조를 나타낸다. 

=> CSSOM 생성 : CSS 파일을 파싱하여 CSSOM을 만든다. 이는 CSS 스타일 규칙을 트리 구조로 표현한 것이다.

=> 렌더 트리 생성 : DOM과 CSSOM을 결합하여 렌더 트리를 만든다. 렌더 트리는 실제로 화면에 표시할 요소들을 포함한다. 화면에 보이지 않는 요소는 렌더 트리에 포함되지 않는다.

=> 레이아웃 : 브라우저는 렌더 트리를 기반으로 각 요소의 정확한 위치와 크기를 계산한다. (리플로우)

=> 페인트 : 브라우저는 레이아웃 정보를 바탕으로 요소들을 실제 픽셀 단위로 화면에 그린다. 이 과정에서 색상, 그림자, 테두리 등 스타일 속성을 계산하여 화면에 표시한다.

=> 컴포지팅 : 여러 레이어가 있는 경우 (CSS 애니메이션, 변환 등) 브라우저는 각각의 레이어를 합쳐 화면에 최종적으로 렌더링한다.


<렌더링 성능을 저하시킬 수 있는 요소들>
=> 자주 발생하는 레이아웃 변경 : 자바스크립트 코드에서 DOM을 자주 수정하거나, CSS에서 레이아웃을 다시 계산하게 만드는 속성 (width, height, margin 등) 을 변경할 때, 리플로우가 빈번히 발생한다.

=> 잦은 페인트 : 레이아웃은 변경되지 않지만 요소의 스타일(배경색, 그림자, 텍스트 색상 등)이 변경될 경우 페인트 과정이 빈번하게 발생하며, 이는 브라우저의 GPU와 CPU 리소스를 많이 사용한다.

=> 자바스크립트 차단 : 자바스크립트가 동기적으로 실행될 때, 특히 페이지 로드 중 블로킹 스크립트가 있을 경우 전체 렌더링이 지연될 수 있다

=> 이미지나 리소스 크기 : 고해상도 이미지 또는 불필요하게 큰 리소스를 사용하면 네트워크 지연과 렌더링 성능 저하를 유발할 수 있다.

=> 애니메이션: CSS나 자바스크립트를 이용한 복잡한 애니메이션은 CPU 및 GPU를 많이 사용하며, 특히 transform이나 opacity 외의 속성을 애니메이션으로 처리하면 레이아웃 재계산과 페인트를 유발하여 성능을 저하시킬 수 있다.

<레이아웃 시프트>
=> 페이지가 로드되는 동안 요소들이 갑작스럽게 위치를 변경하여 사용자가 예상하지 못한 방식으로 레이아웃이 변화하는 현상이다. 사용자 경험을 해치는 주요 원인 중 하나로, 누적 레이아웃 시프트 (CLS) 라는 지표로 이를 측정한다.

= 최적화 기법
=> 이미지와 비디오의 크기 명시 : 이미지를 로드할 때, 크기가 지정되지 않으면 로딩 중 이미지가 차지하는 공간이 변하면서 레이아웃 시프트가 발생할 수 있다. 따라서 모든 이미지와 비디오 요소에 너비와 높이를 명시적으로 설정하여 자리 확보를 미리 해준다.

=> 페인트 성능 최적화 ------------------------------------------

=> 애니메이션 최적화: transform과 opacity 속성을 이용한 애니메이션은 브라우저의 GPU 가속을 사용하며, 다른 속성을 애니메이션화 할 때보다 레이아웃 과정을 최소화할 수 있다.

=> 컴포지팅 레이어 사용 : will-change: tranform 또는 will-change: opacity를 사용하여 브라우저에 특정 요소가 변경될 가능성이 있음을 미리 알려 최적화된 컴포지팅 레이어를 생성할 수 있다. 이는 불필요한 레이아웃 재계산을 피할 수 있게 해준다

=> 복잡한 스타일 최소화

=> 페인트 영역 최소화 : 작은 부분만 변화하는 경우에도 전체 페이지가 다시 페인트되지 않도록 변화 영역을 최소화하는 것이 좋다.
