<useImperativeHandle>

* React에서 useImperativeHandle 훅을 사용하는 목적과 그 동작 방식을 설명하고, 언제 이를 사용해야 하는지 설명하라. useImperativeHandle을 남용했을 때 문제점과 이를 방지하기 위한 사례를 설명하라

=> useImperativeHandle 훅은 React 에서 커스텀 참조 (ref) 객체를 만들어 부모 컴포넌트가 자식 컴포넌트의 인스턴스에서 특정 메서드나 값을 사용할 수 있도록 하는 기능을 제공한다. 

=> 일반적으로 React에서는 컴포넌트 인스턴스에 접근할 때, ref를 통해 접근한다. 그러나 ref는 기본적으로 DOM 요소에만 적용되며, 함수형 컴포넌트의 내부 로직이나 상태는 참조할 수 없다. 이 때, useImperativeHandle을 사용하여 컴포넌트의 내부 로직을 부모 컴포넌트에 노출할 수 있다.

=> useImperativeHandle (ref, createHandle, deps)
- ref : 부모에서 전달 받은 ref
- createHandle : ref 객체에 노출할 동작이나 값들을 정의하는 함수
- deps : 종속성 배열로, 값이 변경될 때마다 createHandle  이 다시 실행된다

<예시>
import React, { useImperativeHandle, useRef, forwardRef } from 'react';

const ChildComponent = forwardRef((props, ref) => {
  const inputRef = useRef();

  // useImperativeHandle을 사용하여 부모에게 노출할 값이나 메서드 정의
  useImperativeHandle(ref, () => ({
    focus: () => {
      inputRef.current.focus();
    },
  }));

  return <input ref={inputRef} />;
});

const ParentComponent = () => {
  const childRef = useRef();

  return (
    <div>
      <ChildComponent ref={childRef} />
      <button onClick={() => childRef.current.focus()}>Focus Input</button>
    </div>
  );
};


=> useImperativeHandle은 컴포넌트 외부에서 자식 컴포넌트의 동작을 직접적으로 제어할 필요가 있을 때, 사용된다. 
- 자식 컴포넌트 내의 DOM 엘리먼트에 대한 직접적인 제어가 필요할 때
- 부모 컴포넌트에서 자식 컴포넌트의 특정 동작을 직접적으로 호출하고 싶을 때

=> 해당 훅을 남용하게 되면, React의 단방향 데이터 흐름을 깨뜨리고, 부모-자식 관계가 역전될 수 있으며, 컴포넌트 간의 결합도가 높아지는 구조적인 문제가 발생할 수 있다.

=> 꼭 필요한 경우에만 사용하고, 일반적으로 Props Drilling 이나 Props로 문제를 해결하는 방법을 우선적으로 고려해야 한다.