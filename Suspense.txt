<Suspense>
* React에서 Suspense와 Error Boundaries를 함께 사용하여 비동기 데이터 로딩 시 발생할 수 있는 문제를 어떻게 처리할 수 있는가?  Suspense로 데이터 로딩 상태를 관리할 때 발생할 수 있는 문제점과 해결방법을 설명하라.

=> Suspense와 Error Boundaries를 함께 사용하면 비동기 데이터 로딩 시 발생할 수 있는 문제를 효과적으로 관리할 수 있다. 이 두가지를 결합하여 로딩 상태와 에러 상태를 각각 처리할 수 있다.

=> Suspense : React에서 비동기 데이터를 로드할 때, 컴포넌트가 준비되지 않으면 대기 중인 상태를 보여주는 역할을 수행한다. Suspense는 로딩 중일 때, UI의 일부분을 대체할 수 있도록 fallback 속성을 사용한다.

=> ErrorBoundary : 컴포넌트에서 발생하는 에러를 잡아내고, 사용자에게 에러 페이지나 특정 UI를 제공해주는 컴포넌트이다. 주로 비동기 데이터 로드나 컴포넌트 렌더링 시 발생하는 오류를 처리할 때, 사용된다.

=> Suspense는 데이터 로딩 로직이 지원하는 방식으로 작성되어야 하며, React.lazy와 useEffect를 활용하여 지연 로드한다.

* 문제점 1
=> Suspense가 비동기 에러를 처리하지 못함
=> Suspense는 비동기 데이터 로딩 상태만 관리하고, 에러를 처리할 수 없다. 예를 들어, API 호출이 실패할 경우 에러는 Suspense에서 처리되지 않으므로, 사용자는 로딩 상태에 갇히게 된다.
해결방안 => Suspense는 데이터 로딩 상태를 관리하고, Error Boundaries 는 데이터 로딩 중 발생할 수 있는 에러를 잡아낸다. 이렇게 결합하여 비동기 데이터 로딩 시 발생할 수 있는 문제들을 모두 처리할 수 있다.

<ErrorBoundary>
  <Suspense fallback={<LoadingSpinner />}>
    <YourComponent />
  </Suspense>
</ErrorBoundary>

* 문제점 2
=> 비동기 데이터 fetch 시 대기 시간이 길어질 수 있다.
=> Suspense는 데이터를 전부 로드할 때까지, UI가 fallback 상태로 유지되기 때문에, 만약 로딩 시간이 길어지면 사용자가 지루함을 느낄 수 있다.
해결방안 => 단순한 로딩 스피너 대신, Skeleton UI 같은 로딩 중인 상태의 더 나은 UX를 제공한다면, 사용자가 비동기 데이터 로딩 중임을 직관적으로 느끼고, 지루함을 덜 느끼게 된다.

<Suspense fallback={<SkeletonComponent />}>
  <YourComponent />
</Suspense>

* 문제점 3
=> 다수의 비동기 요청이 동시에 이루어질 경우, 각각의 요청이 독립적으로 관리되지 않으면, 전체 로딩 상태가 복잡해질 수 있다. 
해결방안 => React는 다수의 Suspense 컴포넌트를 순차적으로 보여줄 수 있는 SuspenseList를 제공한다. 이를 통해 여러 비동기 데이터 요청을 적절히 처리할 수 있다. 비동기 요청의 순차적 렌더링을 지원하여 데이터가 각각 로드될 때, UI가 자연스럽게 업데이트된다.

<SuspenseList revealOrder="forwards">
  <Suspense fallback={<LoadingSpinner />}>
    <Component1 />
  </Suspense>
  <Suspense fallback={<LoadingSpinner />}>
    <Component2 />
  </Suspense>
</SuspenseList>
