* 웹 애플리케이션에서 이미지 최적화를 위해 webP 포맷을 사용하는 장점과 적용 방법을 설명
* 해당 포맷이 JPEG나 PNG와 비교했을 때, 성능에 미치는 영향

=> webP 포맷의 장점은 효율적인 압축, 파일 크기 감소, 알파 채널을 지원하며, 브라우저도 지원해준다.

=> webP는 손실 및 무손실 압축을 모두 지원하며, JPEG 대비 더 작은 파일 크기를 유지하면서도 비슷하거나 더 나은 이미지 품질을 제공한다. PNG와 비교했을 때, 같은 품질에서 더 작은 크기의 무손실 이미지를 생성할 수 있다.

=> webP는 JPEG 보다 평균적으로 25-34% 더 작은 파일 크기를 유지하면서도 비슷한 품질의 이미지를 제공한다. 이는 웹 페이지의 로딩 시간을 단축하고, 사용자 경험을 향상시켜, 데이터 소비를 줄인다.

=> webP는 PNG와 같이 투명도(알파 채널) 를 지원한다. 또한, PNG보다 무손실 이미지의 크기가 더 작기 때문에, 투명한 이미지를 사용할 때도 이점을 제공한다.

=> 대부분의 최신 브라우저는 webP 포맷을 지원한다.

! HTML에서 webP 적용하기
=> picture 태그를 사용하여 webP를 지원하는 브라우저에서는 webP 이미지를 제공하고, 그렇지 않은 경우에는 JPEG 나 PNG와 같은 대체 이미지를 제공할 수 있다.

ex )   <picture>
	  <source srcset='image.webp" type="image/webp">
	  <img src = "image.jpg" alt = "description">
	</picture>	

! 이미지를 webP로 변환하기
=> imagemin, sharp 같은 Node.js 모듈을 사용하거나, 온라인 변환 툴을 사용할 수 있다.

# 성능에 미치는 영향
- 로드 시간 단축 : webP는 더 작은 파일 크기를 제공하므로 웹 페이지 로딩 시간이 단축되고, 특히 모바일 환경에서 네트워크 성능이 크게 향상된다.
- 대역폭 절약 : 작은 이미지 파일 크기로 인해 서버에서 사용자로 전송되는 데이터의 양이 줄어든다. 이는 데이터 비용 절감과 서버 부하 감소로 이어진다.
- 이미지 품질 유지 : JPEG 나 PNG 와 비교했을 때, webP는 동일한 품질에서 더 작은 크기를 제공하지만, 이미지 품질을 상대적으로 잘 유지한다.


# 브라우저 호환성 문제 해결 방법
- webP를 지원하지 않는 브라우저가 존재하는 경우, 대체 이미지와 조건부 로딩을 사용해 모든 사용자에게 최적화된 이미지를 제공할 수 있다.



# 최적의 이미지 로딩 경험을 제공하기 위한 대체 방법
- 지연 로딩 : 페이지 로드 시 모든 이미지를 한 번에 로딩하는 대신, 사용자가 화면을 스크롤하면서, 이미지를 로드하는 방식이다. 이를 통해 초기 로드 시간을 줄이고, 사용자 경험을 개선할 수 있다. => image 태그의 loading 속성에 'lazy' 를 작성하면 해당 이미지가 사용자의 화면에 나타낼 때만 로딩된다.

- 이미지 CDN (Content Delivery Network) : 이미지 최적화 및 전송 속도를 높이기 위해 CDN을 활용할 수 있다. CDN 은 지리적으로 분산된 서버에서 이미지를 제공하므로, 사용자가 가까운 서버로부터 빠르게 이미지를 받을 수 있다. 또한 대부분의 CDN은 이미지 최적화 기능을 자동으로 제공한다.

- 반응형 이미지 : srcset 속성을 사용해 다양한 화면 크기에 맞는 이미지를 제공한다. 이는 모바일, 태블릿, 데스크톱 등 다양한 해상도에 따라 적절한 크기의 이미지를 불러와 데이터 사용량을 줄이고 로딩 속도를 높인다. 
